import random
import string

from . import socketio
from flask import Blueprint, redirect, request, render_template, url_for
from flask_socketio import emit, join_room

bp = Blueprint("game", __name__, url_prefix="/game")

ROOM_ID = ""


def generate_room_id():
    """ Generates a random ID of 6 characters that is not currently in use. """
    # TODO: need to check this isn't already in use and then write a test for
    #  it.
    global ROOM_ID
    generated = "".join(random.choice(string.ascii_uppercase) for _ in range(6))
    ROOM_ID = generated
    return generated


@bp.route("/", methods=("GET", "POST"))
def join_or_start_game_page():
    """ Manages the initial navigation to the game main page which contains two
    choices: start a new game or join an existing one.
    """
    if request.method == "GET":
        return render_template("game_menu.html")
    if "new_game" in request.form:
        return redirect(url_for("game.start_new_game"))
    return redirect(url_for("game.join_game"))


@bp.route("/start", methods=("GET", "POST"))
def start_new_game():
    """ Manages starting a new game. """
    if request.method == "GET":
        return render_template("game_start_new.html")
    return redirect(url_for("game.waiting_room"))


@bp.route("/join", methods=("GET",))
def join_game():
    """ Manages joining an existing game. """
    return render_template("game_join.html")


@bp.route("/waiting_room", methods=("GET",))
def waiting_room():
    """ Manages the waiting room before a game starts. """
    # Hopefully I can join a room without too much of an issue
    return render_template("game_waiting_room.html")


@socketio.on("client_joined")
def handle_message(data):
    print(f"I have received a message {data}")


@socketio.on("start_waiting_room")
def create_waiting_room():
    print("I have joined a room!")
    join_room(generate_room_id())


@socketio.on("load_waiting_room")
def load_waiting_room():
    # The ID will have definitely been generated by now (I'm like 98% confident)
    print(f"retriving id {ROOM_ID}")
    socketio.emit("retrive_room_id", {"id": ROOM_ID})
